---
// Navigation component for 8 days
const currentDay = Astro.props.currentDay || 1;

// Day information mapping with GPX file paths for dynamic loading
const dayInfo = {
  1: { route: "San Francisco to Santa Cruz", date: "Sat, Sep 7, 2025", gpxFile: "/gpx/CCC_Day_1_fun_finders_2025.gpx" },
  2: { route: "Santa Cruz to Monterey", date: "Sun, Sep 8, 2025", gpxFile: "/gpx/CCC_Day_2_2025_Fun_Finders.gpx" },
  3: { route: "Monterey to Big Sur", date: "Mon, Sep 9, 2025", gpxFile: "/gpx/CCC_day_3_Monterey_to_Big_Sur.gpx" },
  4: { route: "Paso Robles to Cambria", date: "Tue, Sep 10, 2025", gpxFile: "/gpx/CCC_Day_4_Paso_Robles_to_Cambria.gpx" },
  5: { route: "Cambria to Pismo Beach", date: "Wed, Sep 11, 2025", gpxFile: "/gpx/CCC_Day_5_Cambria_to_Pismo_Beach.gpx" },
  6: { route: "Pismo Beach to Buellton", date: "Thu, Sep 12, 2025", gpxFile: "/gpx/CCC_Day_6_Pismo_Beach_to_Buellton.gpx" },
  7: { route: "Buellton to Ventura", date: "Fri, Sep 13, 2025", gpxFile: "/gpx/CCC_Day_7_Buellton_to_Ventura.gpx" },
  8: { route: "Ventura to Malibu", date: "Sat, Sep 14, 2025", gpxFile: "/gpx/CCC_Day_8_Ventura_to_Malibu.gpx" }
};

// Generate dynamic title
const currentDayInfo = dayInfo[currentDay];
const title = currentDayInfo
  ? `Day ${currentDay} - ${currentDayInfo.date} (${currentDayInfo.route})`
  : "CCC Fun Finders 2025";

---

<nav class="day-navigation">
  <div class="nav-container">
    <div class="nav-days">
      {[1, 2, 3, 4, 5, 6, 7, 8].map(day => (
        <a
          href={day === 1 ? '/' : `/day${day}`}
          class={`day-link ${currentDay === day ? 'active' : ''}`}
          data-day={day}
          data-route={dayInfo[day]?.route || 'Route TBD'}
          data-date={dayInfo[day]?.date || 'Date TBD'}
        >
          <div class="rv-container">
            <div class="day-label">Day {day}</div>
            <img src="/rv_arse.png" alt="RV" class="rv-icon" />
          </div>
          <div class="tooltip">
            <div class="tooltip-content">
              <div class="tooltip-day">Day {day}</div>
              <div class="tooltip-route">{dayInfo[day]?.route || 'Route TBD'}</div>
              <div class="tooltip-date">{dayInfo[day]?.date || 'Date TBD'}</div>
              <div class="tooltip-stats" data-day={day}>-- mi â€¢ -- ft climbed</div>
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>
</nav>

<style>
  .day-navigation {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    position: sticky;
    top: 0;
    z-index: 100;
    margin-bottom: 2rem;
  }

  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }


  .nav-days {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .day-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.5rem;
    border-radius: 12px;
    text-decoration: none;
    color: #666;
    background: transparent;
    border: none;
    transition: all 0.3s ease;
    position: relative;
    min-width: 80px;
  }

  .day-link:hover:not(.coming-soon) {
    transform: translateY(-2px);
  }

  .day-link.active .rv-icon {
    filter: drop-shadow(0 4px 12px rgba(59, 130, 246, 0.8)) drop-shadow(0 0 8px rgba(59, 130, 246, 0.6));
  }

  .day-link.active .day-label {
    color: #1e40af;
    font-weight: 600;
  }

  .day-link.coming-soon {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  .rv-container {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .rv-icon {
    width: 85px;
    height: 85px;
    transition: all 0.3s ease;
  }

  .day-link:hover .rv-icon {
    transform: scale(1.05);
  }

  .day-label {
    position: absolute;
    top: 8px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.65rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: #4a5568;
    background: rgba(255, 255, 255, 0.9);
    padding: 2px 6px;
    border-radius: 8px;
    border: 1px solid rgba(139, 69, 19, 0.3);
    white-space: nowrap;
    z-index: 10;
  }

  .coming-soon-badge {
    position: absolute;
    top: -6px;
    right: -6px;
    background: #f59e0b;
    color: white;
    font-size: 0.6rem;
    font-weight: 600;
    padding: 2px 6px;
    border-radius: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Tooltip styling */
  .tooltip {
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-top: 10px;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
    z-index: 1000;
  }

  /* Tooltip positioning variants */
  .tooltip.tooltip-left {
    left: 0;
    transform: translateX(0);
  }

  .tooltip.tooltip-right {
    left: auto;
    right: 0;
    transform: translateX(0);
  }

  .tooltip-content {
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 0.75rem;
    border-radius: 8px;
    font-size: 0.85rem;
    line-height: 1.4;
    white-space: nowrap;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
  }

  .tooltip-content::after {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-bottom: 6px solid rgba(0, 0, 0, 0.9);
  }

  .tooltip-day {
    font-weight: 700;
    color: #60a5fa;
    margin-bottom: 0.25rem;
  }

  .tooltip-route {
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .tooltip-date {
    font-size: 0.75rem;
    opacity: 0.8;
  }

  .tooltip-stats {
    font-size: 0.75rem;
    opacity: 0.9;
    color: #60a5fa;
    font-weight: 600;
    margin-top: 0.25rem;
  }

  .day-link:hover .tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(5px);
  }

  /* Force single row at all screen sizes */
  .nav-days {
    flex-wrap: nowrap;
    justify-content: center;
    width: 100%;
  }

  .day-link {
    flex: 1 1 0;
    min-width: 0;
    max-width: 95px;
  }

  /* Medium screens */
  @media (max-width: 768px) {
    .nav-container {
      padding: 1rem 0.5rem;
    }

    .day-link {
      max-width: 80px;
      padding: 0.25rem;
    }

    .rv-icon {
      width: 65px;
      height: 65px;
    }

    .day-label {
      font-size: 0.6rem;
      padding: 1px 4px;
      top: 6px;
    }
  }

  /* Small screens */
  @media (max-width: 480px) {
    .nav-container {
      padding: 0.75rem 0.25rem;
    }

    .nav-days {
      gap: 0.25rem;
    }

    .day-link {
      max-width: 70px;
      padding: 0.125rem;
    }

    .rv-icon {
      width: 55px;
      height: 55px;
    }

    .day-label {
      font-size: 0.55rem;
      padding: 1px 3px;
      top: 5px;
    }

    /* Hide tooltips on mobile to avoid interference with touch */
    .tooltip {
      display: none;
    }
  }

  /* Very small screens */
  @media (max-width: 360px) {
    .nav-days {
      gap: 0.125rem;
    }

    .day-link {
      max-width: 60px;
    }

    .rv-icon {
      width: 45px;
      height: 45px;
    }

    .day-label {
      font-size: 0.5rem;
      padding: 1px 2px;
      top: 4px;
    }
  }
</style>

<script>
  // GPX parsing functions (simplified version from Map component)
  function calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 3959; // Earth's radius in miles
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  function parseGPXForStats(gpxText) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(gpxText, 'application/xml');

    const trackPoints = Array.from(doc.querySelectorAll('trkpt')).map(point => ({
      lat: parseFloat(point.getAttribute('lat')),
      lng: parseFloat(point.getAttribute('lon')),
      elevation: point.querySelector('ele')?.textContent ? parseFloat(point.querySelector('ele').textContent) : null
    }));

    let totalDistance = 0;
    let totalElevationGain = 0;

    for (let i = 1; i < trackPoints.length; i++) {
      const prev = trackPoints[i - 1];
      const curr = trackPoints[i];

      // Calculate distance
      const segmentDistance = calculateDistance(prev.lat, prev.lng, curr.lat, curr.lng);
      totalDistance += segmentDistance;

      // Calculate elevation gain
      if (prev.elevation !== null && curr.elevation !== null) {
        const elevationDiff = curr.elevation - prev.elevation;
        if (elevationDiff > 0) {
          totalElevationGain += elevationDiff * 3.28084; // Convert meters to feet
        }
      }
    }

    return {
      totalDistance: totalDistance,
      totalElevationGain: totalElevationGain
    };
  }

  // Day info with GPX files
  const dayGpxFiles = {
    1: "/gpx/CCC_Day_1_fun_finders_2025.gpx",
    2: "/gpx/CCC_Day_2_2025_Fun_Finders.gpx",
    3: "/gpx/CCC_day_3_Monterey_to_Big_Sur.gpx",
    4: "/gpx/CCC_Day_4_Paso_Robles_to_Cambria.gpx",
    5: "/gpx/CCC_Day_5_Cambria_to_Pismo_Beach.gpx",
    6: "/gpx/CCC_Day_6_Pismo_Beach_to_Buellton.gpx",
    7: "/gpx/CCC_Day_7_Buellton_to_Ventura.gpx",
    8: "/gpx/CCC_Day_8_Ventura_to_Malibu.gpx"
  };

  // Cache for loaded stats
  const statsCache = {};

  // Load stats for a specific day
  async function loadDayStats(day) {
    if (statsCache[day]) {
      return statsCache[day];
    }

    try {
      const response = await fetch(dayGpxFiles[day], { cache: 'no-cache' });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      const gpxText = await response.text();
      if (!gpxText || gpxText.indexOf('<trkpt') === -1) {
        throw new Error('GPX missing track points');
      }
      const stats = parseGPXForStats(gpxText);

      const result = {
        miles: stats.totalDistance.toFixed(1),
        elevation: Math.round(stats.totalElevationGain).toLocaleString()
      };

      statsCache[day] = result;
      return result;
    } catch (error) {
      console.error(`Failed to load stats for day ${day}:`, error);
      return { miles: '--', elevation: '--' };
    }
  }

  // Position tooltip to avoid going off-screen
  function positionTooltip(link, tooltip) {
    const linkRect = link.getBoundingClientRect();
    const tooltipRect = tooltip.querySelector('.tooltip-content').getBoundingClientRect();
    const viewportWidth = window.innerWidth;

    // Reset classes
    tooltip.classList.remove('tooltip-left', 'tooltip-right');

    // Check if tooltip would go off the left edge
    if (linkRect.left + (tooltipRect.width / 2) < 10) {
      tooltip.classList.add('tooltip-left');
    }
    // Check if tooltip would go off the right edge
    else if (linkRect.right - (tooltipRect.width / 2) > viewportWidth - 10) {
      tooltip.classList.add('tooltip-right');
    }
    // Otherwise use center positioning (default)
  }

  // Setup hover listeners when DOM is ready
  function setupHoverListeners() {
    const dayLinks = document.querySelectorAll('.day-link');

    dayLinks.forEach(link => {
      const day = parseInt(link.dataset.day);
      const tooltip = link.querySelector('.tooltip');

      link.addEventListener('mouseenter', async () => {
        const statsElement = link.querySelector(`[data-day="${day}"]`);
        if (statsElement && statsElement.textContent === '-- mi â€¢ -- ft climbed') {
          // Show a quick loading state on first hover while we fetch GPX stats
          statsElement.textContent = 'loadingâ€¦';
          const stats = await loadDayStats(day);
          statsElement.textContent = `${stats.miles} mi â€¢ ${stats.elevation} ft climbed`;
        }

        // Position tooltip to avoid going off-screen
        if (tooltip) {
          // Small delay to ensure tooltip content is rendered
          setTimeout(() => positionTooltip(link, tooltip), 10);
        }
      });
    });
  }

  // Setup listeners when page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupHoverListeners);
  } else {
    setupHoverListeners();
  }
</script>
