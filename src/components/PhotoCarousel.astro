---
// Photo carousel component
---

<div id="photo-modal" class="modal hidden">
  <div class="modal-content">
    <span class="close">&times;</span>
    <div class="location-header">
      <h3 id="location-title">Location</h3>
      <div class="location-nav">
        <button class="location-nav-btn" id="prev-location">&#8249; Previous Location</button>
        <span id="location-counter">1 of 1</span>
        <button class="location-nav-btn" id="next-location">Next Location &#8250;</button>
      </div>
    </div>
    <div class="carousel-container">
      <button class="nav-btn prev-btn" id="prev-btn">&#8249;</button>
      <div class="carousel-track">
        <div id="carousel-content"></div>
        <!-- Mobile touch zones -->
        <div class="mobile-touch-zone prev-touch-zone" id="prev-touch-zone"></div>
        <div class="mobile-touch-zone next-touch-zone" id="next-touch-zone"></div>
      </div>
      <button class="nav-btn next-btn" id="next-btn">&#8250;</button>
    </div>
    <div class="photo-info">
      <div class="photo-counter">
        <span id="photo-counter-text">1 / 1</span>
        <button id="copy-link-btn" class="copy-link-btn" title="Copy link to this photo">
          <span class="copy-icon">üîó</span>
        </button>
      </div>
      <div class="photo-caption" id="photo-caption">
        Photo 1 at Location
      </div>
      <div class="photo-timestamp" id="photo-timestamp">
        Date and time
      </div>
    </div>
  </div>
</div>

<!-- Mini-map positioned separately to avoid flashing -->
<div class="mini-map-container" id="mini-map-container">
  <button id="minimap-toggle" class="minimap-toggle-btn" title="Hide minimap">
    <span class="minimap-toggle-icon">üëÅÔ∏è</span>
  </button>
  <div id="mini-map"></div>
</div>

<!-- Minimap placeholder when hidden -->
<div class="minimap-placeholder" id="minimap-placeholder">
  <button id="show-minimap-btn" class="show-minimap-btn" title="Show minimap">
    üó∫Ô∏è
  </button>
</div>

<script>
  class PhotoCarousel {
    constructor() {
      this.modal = document.getElementById('photo-modal');
      this.content = document.getElementById('carousel-content');
      this.counter = document.getElementById('photo-counter-text');
      this.caption = document.getElementById('photo-caption');
      this.timestamp = document.getElementById('photo-timestamp');
      this.locationTitle = document.getElementById('location-title');
      this.locationCounter = document.getElementById('location-counter');
      this.prevBtn = document.getElementById('prev-btn');
      this.nextBtn = document.getElementById('next-btn');
      this.prevLocationBtn = document.getElementById('prev-location');
      this.nextLocationBtn = document.getElementById('next-location');
      this.closeBtn = document.querySelector('.close');
      this.copyLinkBtn = document.getElementById('copy-link-btn');
      this.prevTouchZone = document.getElementById('prev-touch-zone');
      this.nextTouchZone = document.getElementById('next-touch-zone');

      this.photos = [];
      this.currentIndex = 0;
      this.locationContext = null;
      this.miniMap = null;
      this.currentMarker = null;
      this.minimapHidden = false;

      this.bindEvents();
    }

    // Ensure any map hover tooltips/slideshows are closed before showing modal
    closeHoverSlideshows() {
      try {
        if (window.routeMap && typeof window.routeMap.eachLayer === 'function') {
          window.routeMap.eachLayer(layer => {
            if (typeof layer.closeTooltip === 'function') {
              try { layer.closeTooltip(); } catch (_) {}
            }
            if (layer._photoSlideshowInterval) {
              try { clearInterval(layer._photoSlideshowInterval); } catch (_) {}
              layer._photoSlideshowInterval = null;
            }
          });
        }
        // Remove any custom No-GPS hover tooltips; their own intervals self-clear when DOM node is gone
        document.querySelectorAll('.photo-preview-tooltip.custom').forEach(el => {
          if (el && el.parentElement) el.parentElement.removeChild(el);
        });
      } catch (_) {}
    }

    bindEvents() {
      this.closeBtn.addEventListener('click', () => this.close());
      this.prevBtn.addEventListener('click', () => this.prev());
      this.nextBtn.addEventListener('click', () => this.next());
      this.prevLocationBtn.addEventListener('click', () => this.prevLocation());
      this.nextLocationBtn.addEventListener('click', () => this.nextLocation());

      // Mobile touch zones for easier navigation
      if (this.prevTouchZone) {
        this.prevTouchZone.addEventListener('click', () => this.prev());
        this.prevTouchZone.addEventListener('touchend', (e) => {
          e.preventDefault();
          this.prev();
        });
      }
      if (this.nextTouchZone) {
        this.nextTouchZone.addEventListener('click', () => this.next());
        this.nextTouchZone.addEventListener('touchend', (e) => {
          e.preventDefault();
          this.next();
        });
      }

      // Close on outside click
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.modal.classList.contains('hidden')) {
          if (e.key === 'Escape') this.close();
          if (e.key === 'ArrowLeft') this.prev();
          if (e.key === 'ArrowRight') this.next();
        }
      });

      // Minimap toggle events
      const minimapToggle = document.getElementById('minimap-toggle');
      const showMinimapBtn = document.getElementById('show-minimap-btn');

      if (minimapToggle) {
        minimapToggle.addEventListener('click', () => this.hideMinimap());
      }
      if (showMinimapBtn) {
        showMinimapBtn.addEventListener('click', () => this.showMinimap());
      }

      // Copy link event
      if (this.copyLinkBtn) {
        this.copyLinkBtn.addEventListener('click', () => this.copyPhotoLink());
      }
    }

    async open(photos, startIndex = 0, locationContext = null) {
      // Close any active hover tooltips/slideshows before opening
      this.closeHoverSlideshows();
      this.photos = photos;
      this.currentIndex = startIndex;
      this.locationContext = locationContext;
      this.render();
      this.modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';

      // Show and initialize mini-map on non-mobile devices
      const miniMapContainer = document.getElementById('mini-map-container');
      const minimapPlaceholder = document.getElementById('minimap-placeholder');
      if (window.innerWidth > 768 && miniMapContainer && minimapPlaceholder) {
        if (this.minimapHidden) {
          miniMapContainer.style.display = 'none';
          minimapPlaceholder.style.display = 'flex';
        } else {
          miniMapContainer.style.display = 'block';
          minimapPlaceholder.style.display = 'none';
        }

        if (!this.miniMap) {
          setTimeout(async () => {
            await this.initMiniMap();
          }, 200);
        } else {
          this.updateMiniMapMarker();
        }
      }
    }

    close() {
      this.modal.classList.add('hidden');
      document.body.style.overflow = 'auto';

      // Hide mini-map but don't destroy it to avoid recreation overhead
      const miniMapContainer = document.getElementById('mini-map-container');
      const minimapPlaceholder = document.getElementById('minimap-placeholder');
      if (miniMapContainer) {
        miniMapContainer.style.display = 'none';
      }
      if (minimapPlaceholder) {
        minimapPlaceholder.style.display = 'none';
      }

      // Clean up URL parameters when closing
      const url = new URL(window.location);
      if (url.searchParams.has('photo') || url.searchParams.has('group')) {
        url.searchParams.delete('photo');
        url.searchParams.delete('group');
        window.history.replaceState({}, '', url);
      }
    }

    hideMinimap() {
      const miniMapContainer = document.getElementById('mini-map-container');
      const minimapPlaceholder = document.getElementById('minimap-placeholder');

      if (miniMapContainer && minimapPlaceholder) {
        miniMapContainer.style.display = 'none';
        minimapPlaceholder.style.display = 'flex';
        this.minimapHidden = true;
      }
    }

    showMinimap() {
      const miniMapContainer = document.getElementById('mini-map-container');
      const minimapPlaceholder = document.getElementById('minimap-placeholder');

      if (miniMapContainer && minimapPlaceholder) {
        miniMapContainer.style.display = 'block';
        minimapPlaceholder.style.display = 'none';
        this.minimapHidden = false;

        // Trigger map resize after showing
        if (this.miniMap) {
          setTimeout(() => {
            this.miniMap.invalidateSize();
          }, 100);
        }
      }
    }

    copyPhotoLink() {
      const photo = this.photos[this.currentIndex];
      if (!photo) return;

      // Create URL with photo parameters
      const url = new URL(window.location);
      url.searchParams.set('photo', photo.name);

      if (this.locationContext) {
        url.searchParams.set('group', this.locationContext.groupIndex.toString());
      }

      const urlString = url.toString();

      // Try modern clipboard API first
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(urlString).then(() => {
          this.showCopyFeedback(true);
        }).catch(() => {
          this.fallbackCopyToClipboard(urlString);
        });
      } else {
        // Fallback for older browsers or non-HTTPS
        this.fallbackCopyToClipboard(urlString);
      }
    }

    fallbackCopyToClipboard(text) {
      // Try the older execCommand method
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        const successful = document.execCommand('copy');
        if (successful) {
          this.showCopyFeedback(true);
        } else {
          this.showCopyFeedback(false, text);
        }
      } catch (err) {
        console.error('Fallback copy failed:', err);
        this.showCopyFeedback(false, text);
      } finally {
        document.body.removeChild(textArea);
      }
    }

    showCopyFeedback(success, url = null) {
      const originalIcon = this.copyLinkBtn.querySelector('.copy-icon');
      const originalText = originalIcon.textContent;

      if (success) {
        originalIcon.textContent = '‚úì';
        this.copyLinkBtn.style.backgroundColor = '#10b981';

        setTimeout(() => {
          originalIcon.textContent = originalText;
          this.copyLinkBtn.style.backgroundColor = '';
        }, 2000);
      } else {
        // Show URL in alert if copying failed
        alert('Copy this link:\n' + (url || 'Link generation failed'));
      }
    }

    async waitForGPXData(L) {
      let attempts = 0;
      while (!window.gpxData && attempts < 50) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
      }

      if (!window.gpxData) {
        console.warn('GPX data not available after 50 attempts');
      }
    }

    async initMiniMap() {
      if (this.miniMap) return;

      try {
        // Load Leaflet
        let L;
        if (window.L) {
          L = window.L;
        } else {
          const leafletModule = await import('https://unpkg.com/leaflet@1.9.4/dist/leaflet-src.esm.js');
          L = leafletModule.default || leafletModule;
          window.L = L; // Store for later use
        }

        const mapContainer = document.getElementById('mini-map');
        if (!mapContainer) {
          console.warn('Mini-map container not found');
          return;
        }

        console.log('Initializing mini-map...');

        // Create mini-map
        this.miniMap = L.map(mapContainer, {
          zoomControl: false,
          attributionControl: false,
          dragging: false,
          scrollWheelZoom: false,
          doubleClickZoom: false,
          boxZoom: false,
          keyboard: false,
          tap: false,
          touchZoom: false
        });

        // Add tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: ''
        }).addTo(this.miniMap);

        // Set default view first
        this.miniMap.setView([37.8, -122.4], 10);

        // Wait for GPX data to be available and copy route
        await this.waitForGPXData(L);

        // Add GPX route to mini-map if available
        if (window.gpxData && window.gpxData.trackLatLngs) {
          console.log('Adding GPX route to mini-map');
          L.polyline(window.gpxData.trackLatLngs, {
            color: '#3b82f6',
            weight: 3,
            opacity: 0.8
          }).addTo(this.miniMap);

          // Fit bounds to route
          const bounds = L.latLngBounds(window.gpxData.trackLatLngs);
          this.miniMap.fitBounds(bounds, { padding: [10, 10] });
        }

        console.log('Mini-map initialized successfully');

        // Force map resize after a brief delay
        setTimeout(() => {
          if (this.miniMap) {
            this.miniMap.invalidateSize();
            this.updateMiniMapMarker();
          }
        }, 100);

      } catch (error) {
        console.error('Error initializing mini-map:', error);
      }
    }

    updateMiniMapMarker() {
      if (!this.miniMap) return;

      try {
        const L = window.L;
        if (!L) {
          console.warn('Leaflet not available for marker update');
          return;
        }

        const photo = this.photos[this.currentIndex];

        // Remove existing marker
        if (this.currentMarker) {
          this.miniMap.removeLayer(this.currentMarker);
          this.currentMarker = null;
        }

        // Add marker for current photo if it has location
        if (photo && photo.lat && photo.lng) {
          console.log(`Updating mini-map marker for ${photo.name} at ${photo.lat}, ${photo.lng}`);

          this.currentMarker = L.marker([photo.lat, photo.lng], {
            icon: L.divIcon({
              className: 'current-photo-marker',
              html: '<div class="current-photo-icon">üìç</div>',
              iconSize: [20, 20],
              iconAnchor: [10, 10]
            })
          }).addTo(this.miniMap);

          // Pan to current photo location
          this.miniMap.panTo([photo.lat, photo.lng]);
        } else {
          console.log('Photo has no location data for mini-map');
        }
      } catch (error) {
        console.error('Error updating mini-map marker:', error);
      }
    }

    prev() {
      if (this.currentIndex > 0) {
        // Move to previous photo in current group
        this.currentIndex--;
        this.render();
      } else if (this.locationContext && this.locationContext.allGroups && this.locationContext.totalGroups > 1) {
        // Move to last photo of previous group
        this.prevLocation();
        this.currentIndex = this.photos.length - 1;
        this.render();
      } else {
        // Wrap to last photo in current group
        this.currentIndex = this.photos.length - 1;
        this.render();
      }
    }

    next() {
      if (this.currentIndex < this.photos.length - 1) {
        // Move to next photo in current group
        this.currentIndex++;
        this.render();
      } else if (this.locationContext && this.locationContext.allGroups && this.locationContext.totalGroups > 1) {
        // Move to first photo of next group
        this.nextLocation();
        this.currentIndex = 0;
        this.render();
      } else {
        // Wrap to first photo in current group
        this.currentIndex = 0;
        this.render();
      }
    }

    prevLocation() {
      if (!this.locationContext || !this.locationContext.allGroups) return;

      const prevGroupIndex = (this.locationContext.groupIndex - 1 + this.locationContext.totalGroups) % this.locationContext.totalGroups;
      const prevGroup = this.locationContext.allGroups[prevGroupIndex];

      this.open(prevGroup.photos, 0, {
        locationName: prevGroup.locationName,
        groupIndex: prevGroupIndex,
        totalGroups: this.locationContext.totalGroups,
        allGroups: this.locationContext.allGroups
      });
    }

    nextLocation() {
      if (!this.locationContext || !this.locationContext.allGroups) return;

      const nextGroupIndex = (this.locationContext.groupIndex + 1) % this.locationContext.totalGroups;
      const nextGroup = this.locationContext.allGroups[nextGroupIndex];

      this.open(nextGroup.photos, 0, {
        locationName: nextGroup.locationName,
        groupIndex: nextGroupIndex,
        totalGroups: this.locationContext.totalGroups,
        allGroups: this.locationContext.allGroups
      });
    }

    render() {
      const photo = this.photos[this.currentIndex];
      const isVideo = photo.name.toLowerCase().endsWith('.mov') ||
                      photo.name.toLowerCase().endsWith('.mp4') ||
                      photo.name.toLowerCase().endsWith('.avi');

      this.content.innerHTML = isVideo
        ? `<video controls style="max-width: 80vw; max-height: 70vh; width: auto; height: auto;"><source src="${photo.url}" type="video/mp4"></video>`
        : `<img src="${photo.url}" alt="${photo.name}" style="max-width: 80vw; max-height: 70vh; width: auto; height: auto;">`;

      // Update photo counter
      this.counter.textContent = `${this.currentIndex + 1} / ${this.photos.length}`;

      // Update location information and filename
      if (this.locationContext) {
        this.locationTitle.textContent = this.locationContext.locationName || 'Unknown Location';
        this.locationCounter.textContent = `${this.locationContext.groupIndex + 1} of ${this.locationContext.totalGroups}`;
        this.caption.textContent = `${photo.name}`;
        this.timestamp.textContent = this.formatTimestamp(photo.timestamp);

        // Show/hide location navigation buttons
        this.prevLocationBtn.style.display = this.locationContext.totalGroups > 1 ? 'block' : 'none';
        this.nextLocationBtn.style.display = this.locationContext.totalGroups > 1 ? 'block' : 'none';
      } else {
        this.locationTitle.textContent = 'Photos';
        this.locationCounter.textContent = '';
        this.caption.textContent = `${photo.name}`;
        this.timestamp.textContent = this.formatTimestamp(photo.timestamp);
        this.prevLocationBtn.style.display = 'none';
        this.nextLocationBtn.style.display = 'none';
      }

      // Show/hide photo navigation buttons
      this.prevBtn.style.display = this.photos.length > 1 ? 'block' : 'none';
      this.nextBtn.style.display = this.photos.length > 1 ? 'block' : 'none';

      // Update mini-map marker
      if (window.innerWidth > 768) {
        this.updateMiniMapMarker();
      }
    }

    formatTimestamp(timestamp) {
      if (!timestamp) return '';

      try {
        const date = new Date(timestamp);
        const options = {
          weekday: 'short',
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: 'numeric',
          minute: '2-digit',
          hour12: true
        };
        return date.toLocaleDateString('en-US', options);
      } catch (error) {
        return '';
      }
    }
  }

  // Initialize carousel
  window.photoCarousel = new PhotoCarousel();
</script>

<style>
  /* Import Leaflet CSS for mini-map */
  @import url('https://unpkg.com/leaflet@1.9.4/dist/leaflet.css');

  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal.hidden {
    display: none;
  }

  .modal-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
  }

  .close {
    position: absolute;
    top: -40px;
    right: 0;
    color: white;
    font-size: 32px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1001;
  }

  .close:hover {
    color: #ccc;
  }

  .carousel-container {
    position: relative;
    display: flex;
    align-items: center;
  }

  .carousel-track {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .mobile-touch-zone {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 40%;
    z-index: 999;
    cursor: pointer;
    display: none; /* Hidden by default, shown on mobile */
  }

  .prev-touch-zone {
    left: 0;
  }

  .next-touch-zone {
    right: 0;
  }

  .mini-map-container {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    width: 200px;
    height: 400px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    border: 2px solid rgba(255, 255, 255, 0.3);
    z-index: 1001;
    display: none;
    background: white;
  }

  .minimap-toggle-btn {
    position: absolute;
    top: 8px;
    right: 8px;
    z-index: 1002;
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(0, 0, 0, 0.2);
    border-radius: 6px;
    padding: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
  }

  .minimap-toggle-btn:hover {
    background: rgba(248, 250, 252, 0.95);
    transform: scale(1.05);
  }

  .minimap-toggle-icon {
    font-size: 12px;
  }

  .minimap-placeholder {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1001;
    display: none;
  }

  .show-minimap-btn {
    background: rgba(59, 130, 246, 0.95);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    padding: 12px;
    color: white;
    font-size: 18px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    width: 48px;
    height: 48px;
  }

  .show-minimap-btn:hover {
    background: rgba(37, 99, 235, 0.95);
    transform: scale(1.1);
    box-shadow: 0 6px 25px rgba(59, 130, 246, 0.6);
  }

  #mini-map {
    width: 100%;
    height: 100%;
  }

  #carousel-content img {
    max-width: 80vw;
    max-height: 70vh;
    width: auto;
    height: auto;
    border-radius: 8px;
  }

  #carousel-content video {
    max-width: 80vw;
    max-height: 70vh;
    width: auto;
    height: auto;
    border-radius: 8px;
  }

  #carousel-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .nav-btn {
    position: absolute;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    font-size: 24px;
    font-weight: bold;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    z-index: 1001;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s;
  }

  .nav-btn:hover {
    background: rgba(255, 255, 255, 0.9);
  }

  .prev-btn {
    left: -60px;
  }

  .next-btn {
    right: -60px;
  }

  .location-header {
    text-align: center;
    color: white;
    margin-bottom: 20px;
  }

  .location-header h3 {
    margin: 0 0 10px 0;
    font-size: 24px;
    font-weight: 600;
  }

  .location-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    margin-bottom: 10px;
  }

  .location-nav-btn {
    background: rgba(59, 130, 246, 0.8);
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s;
  }

  .location-nav-btn:hover {
    background: rgba(59, 130, 246, 1);
  }

  #location-counter {
    color: rgba(255, 255, 255, 0.8);
    font-size: 14px;
  }

  .photo-info {
    text-align: center;
    color: white;
    margin-top: 16px;
  }

  .photo-counter {
    font-size: 16px;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
  }

  .copy-link-btn {
    background: rgba(59, 130, 246, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 6px;
    padding: 4px 8px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    font-size: 12px;
  }

  .copy-link-btn:hover {
    background: rgba(37, 99, 235, 0.9);
    transform: scale(1.05);
  }

  .photo-caption {
    font-size: 14px;
    color: rgba(255, 255, 255, 0.95);
    font-weight: 500;
    background: rgba(0, 0, 0, 0.5);
    padding: 6px 12px;
    border-radius: 16px;
    display: inline-block;
    font-family: 'Courier New', monospace;
    letter-spacing: 0.5px;
  }

  .photo-timestamp {
    font-size: 12px;
    color: rgba(255, 255, 255, 0.8);
    margin-top: 6px;
    font-style: italic;
  }

  .current-photo-marker {
    background: none !important;
    border: none !important;
  }

  .current-photo-icon {
    background: #ef4444;
    border: 2px solid white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
  }

  @media (max-width: 768px) {
    .nav-btn {
      width: 40px;
      height: 40px;
      font-size: 20px;
    }

    .prev-btn {
      left: -50px;
    }

    .next-btn {
      right: -50px;
    }


    #carousel-content img {
      max-width: 90vw;
      max-height: 60vh;
    }

    #carousel-content video {
      max-width: 90vw;
      max-height: 60vh;
    }

    .location-header h3 {
      font-size: 20px;
    }

    .location-nav {
      flex-direction: column;
      gap: 10px;
    }

    .location-nav-btn {
      font-size: 12px;
      padding: 6px 12px;
    }

    .photo-caption {
      font-size: 12px;
      padding: 4px 8px;
      max-width: 90vw;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .mini-map-container {
      display: none !important;
    }

    #carousel-content img,
    #carousel-content video {
      max-width: 85vw;
      max-height: 60vh;
    }

    /* Show mobile touch zones on small screens */
    .mobile-touch-zone {
      display: block;
    }
  }
</style>
